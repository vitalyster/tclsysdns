$Id$

HIGH:

* Rework Impl_ConfigureBackend so that it accepts just one
  capability value and (possibly) one argument (flag) for it
  (except for -defaults).
  Adjust Sysdns_Configure() to use this strategy.

* Rework Impl_CgetBackend() so that it also returns the default
  value for the capability passed to it.

* Make Impl_CgetBackend() to return sensible boolean value
  when asked about "defaults" capability -- it should true
  iff the current set of options is the default,
  false otherwise.

* The front-end resolving command proc should
  refuse to proceceed with unsupported RR unless -rawresult
  is also supplied (and supported by the backend).

* Factor out some DNS message parsing bits from unix/dnsmsg.c
  and unix/lwres.c (namely, generation of POSIX errors, parsing
  of IP addresses, some constants).
  Also some way of consistent reporting of common errors (such
  as the premature message length while parsing a (part of) raw
  DNS message).

* (adns) Check whether ADNS sets errno on errors or just returns
  its "would have been" value.

* (lwres) provide for creation of (bogus (for question) or empty
  members of result set to comply to the script-level interface
  of [::sysdns::resolve].

* (lwres) implement processing of supported RRs.

* (adns) Factor out some bits of error code / result settings.
  Probably this should be generalized to the whole DNS
  subsystem.

* Implement "-raw" format option for [resolve]. This implies
  checking for the OS version on Windows (which should
  probably be done once at startup and cached).
  Notice that both input and output might conceptually be "raw",
  so, probably, something like "-rawquery" and "-rawresult"
  is approptiate.

* Bring the list of DNS RR types in sync with
  http://www.iana.org/assignments/dns-parameters
  (seems like VC defines several types that are unusable
  in queries and thus should be avoided).

* Write test suite.

* (NetBSD) resolver fails to run under multi-threaded Tcl --
  dumps core with "_res not supported on multi-...".
  We have to investigate possible workarounds.

NORMAL:

* (adns) Implement support for some of remaining RR types
  (namely, WKS, NXT).

* In TODO: verify the case of TCLDIR macro pointing to a
  Tcl source tree. Write about building with MinGW.
  Warn about implications of building with VC > 6.0.

* Ensure that (resolver) follows this output format rule:
  % ::sysdns::resolve jabber.ru -type mx -all
  {} {{10 mx.jabber.ru}} {} {213.219.244.136 84.204.76.126}
  i.e. lists any missing entries as empty lists if -all
  is given.

* Investigate why one additional bogus (?) IP is returned
  for the "A" RR for the "www.gnu.org" query on Win32.

* In resolver part, we should probably do an early checks to
  skip parsing of RRs if none of them is needed for result set.

* (dnsmsg.c): boundary checking while parsing RRDATA sections
  should probably take the rdlength parameter into account.

* Extensively comment unix/dnsmsg.c when it's stabilized.
  Explicitly mark mutator functions as being such.

* Investigate why AC_CHECK_LIB doesn't work with MinGW.

* (adns) Look at exploiting ADNS capabilities of async
  processing (implement -command oprtion for [::sysdns::resolve]
  and provide an "event source").

LOW:

* Simplify Configure_GetAll() logic.

* Think of defining an "incomplete type" for the "interp
  data" concept in tclsysdns.h + change the definition
  of corresponding formal parameters to the Impl_* procs.
  This type could be fully speficied in the respective
  implementations.

* Provide script-level command which will call res_init()
  to re-read /etc/resolv.conf, etc.

* When resolver is ready, possibly look at ADNS.
  Same for libdnsres (http://monkey.org/~provos/libdnsres/).

* What's with DNS support on Win9x/WinNT?

* (adns) Test MINFO (and/or RP) impl.

* An AIX communications programming reference document
  http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.commtechref/doc/commtrf2/commtrf2.pdf
  states that in order to use the "dn_expand" resolver
  command an "_BSD" macro must be defined with values of 43 or
  44 and the library must be linked against libbsd.a.

* Create simple release packaging facilities.

UNCERTAIN:

* Study what's happening (libresolv):
  % ::sysdns::resolve .org
  message too long
  Investigation with dig and host shows that this is just a way
  of libresolv to report the error in the query string, for
  instance, both dig and host say:
  $ dig .org
  dig: '.org' is not a legal name (empty label)
  $ host .org
  host: '.org' is not a legal name (empty label)
  Seems like no leading dot is allowed (which is quite
  understandable).
  What's interesting, is how to make this error more
  human-readable.

* (libresolv): investigate why this fails:
  % ::sysdns::resolve www-secure.ip6.cs.ucl.ac.uk -type aaaa -auth
  message too long
  At the first glance it *may* be due to inability of
  dn_expand() to process "canonical" domain name, which isn't
  compressed.
  2007-12-07 it suddenly works w/o any changes to the code.
  dn_expand() is confirmed to expand any <domain-name>s,
  including non-compressed.

* (Win32) looks like question isn't at all returned w/o
  special options.
  First investigation has shown that the question setion is,
  indeed, not returned. Also looks like this also happens for
  the "authority" section.

* (Win32) DNS_RECORD lacks "class" field. We default to "IN"
  as of now.

* (FreeBSD) lwresd seems not available for FreeBSD in either
  of "pre-packaged" forms.

# vim:tw=64:noet
