$Id$


SUPPORTED PLATFORMS

This package is known to build on these platforms:

* Linux (Debian Etch, i386, libc 2.3.6, gcc 4.1.2).
* Win32:
  * MinGW 5.1.3 (gcc 4.1.x, win32api 3.11).
  * Microsoft Visual C (VC6 and VC8).


BUILDING ON UNIX PLATFORMS

On Unix platforms sysnds uses DNS resolution "backends" which
can work with various DNS resolution libraries.
Currently the support is provided for:
* resolv -- the de-facto resolver on most Unix systems (derived
  from BIND). Linux has it it directly in its libc library.
* lwresd -- "Lightweight Resolver Daemon" -- another project
  from the BIND team.

To build sysdns on Unix follow these steps:

1) Make sure you have the Tcl configuration script available.
It's named "tclConfig.sh" and placed in the Tcl library
directory as specified during the Tcl building process via the
"--prefix-lib=..." configure command line parameter.

If you have intalled Tcl from a package distributed with your
system, then you most probably need to install a "development"
package for Tcl (on Linux systems it usually have a name like
tclX.Y-dev).

Also you can use a preconfigured Tcl source tree (i.e. an
unwrapped source tarball in which configure script was run
successfully) since it will also contain a ready to be installed
tclConfig.sh.

2) Make sure you have "development" package for the DNS
resolution backend you intend to use (note that on Linux, resolv
is a part of libc, so you need to have the "development" package
for libc on such systems).

2) Run configure script. Most certainly you will need to specify
the path to your Tcl configuration (tclCondig.sh file); for this
use --with-tcl=... command-line parameter to configure.

By default sysdns uses the "resolv" DNS resolution backend; if
you intend to use another, specify --with-backend=... command
line parameter to configure. Valid values for this switch
currently are: "resolv" and "lwresd".

When configure runs it checks for presence of necessary header
files and libraries for the chosen backend. Pay attention to any
warnings regarding missing stuff -- this may signalize you still
have no "development" packages for your backend installed,
broken setup or something like this.

3) If configure worked OK, run "make" to build the package.

4) You can run "make test" to test the package before installing
it. Observe, that for tests to work properly you need to have:
* Working network connectivity (since the tests will perform
  live DNS queries).
* Working backend which was configured for sysdns to use (for
  example, for lwresd backend you need lwresd daemon started and
  properly configured.

5) Install the package using "make install".

NOTE that "make uninstall" target isn't supported, so if you're
concerned about possible issues with future package removal, use
appropriate tools like stow and checkinstall to install the
package.


BUILDING USING MICROSOFT VISUAL C

NOTE that when building with VC >= 7.0 you implicitly create a
binary dependency of sysdns on the corresponding versions of
"msvcrt" libraries which may not be present on computers
currently in use. In other words, all versions of Windows
including Windows XP (SP2) are shipped without msvcrt libraries
corresponding to versions 7.0 and 8.0 or Visual C compiler, and
you may be in need of distributing those runtime libraries along
with your build of sysdns package to the target sites.
So, to be as much backward-compatible as possible, use VC6 for
building -- its runtime libraries are distributed with all
stock versions of Windows staring from Win95.

1) Make sure you have appropriate (parts of) Platform SDK
installed, plain C compiler (like Microsoft Visual Studio
Express editions) won't work since several system headers and
import libraries will be missing.

2) Make sure you have the C compiler and other necessary tools
listed in the PATH. If you have MSVS installed in the system
this may already be the case; if not, look for a batch file
called something like vcvarsall.bat in the directory tree of
MSVS. Running this script will properly set up the environment
of the shell in which it's being run.

While in the console, you can check your setup by running
"cl.exe" without parameters -- if it starts up and prints its
version info then you're probably ready to compile.

3) Get to the shell (start cmd.exe) and change dir to the "win"
subdirectory of the root folder of the sysdns source tree.

4) Run nmake to build the project like this:
nmake -f Makefile.vc all TCLDIR=C:\Tcl

Notice the TCLDIR macro listed on the command line: it is
required and must point either to the root folder of an installed
Tcl runtime or to a properly configured Tcl source tree.
NOTE that C:\Tcl is just an example.

5) After building the package you can test it using:
nmake -f Makefile.vc test TCLDIR=C:\Tcl

Make sure you have active network connection with properly
configured DNS servers for it since the test scripts will
perform live DNS queries.

6) Install the package using
nmake -f Makefile.vc install TCLDIR=C:\Tcl


# vim:noet:tw=64
